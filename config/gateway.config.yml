http:
  port: ${PORT:-'9080'}
apiEndpoints:
  auth:
    paths: 
      - '/api/v1/user'
      - '/api/v1/login'
    methods: ["POST"]
  api:
    path: '/*'
serviceEndpoints:
  auth:
    url: 'https://urbanio-autenticacion.herokuapp.com'
  facturacion:
    url: 'https://backend-facturacion-1.herokuapp.com/'
  reservas:
    url: 'https://urbanio-reservas.herokuapp.com'
  vehiculos:
    url: 'https://urbanio-vehiculos.herokuapp.com'
  viajes:
    url: 'https://microservice-travel.herokuapp.com'
policies:
  - log
  - jwt
  - request-transformer
  - proxy
  - cors
pipelines:
  authPipeline:
    apiEndpoints:
      - auth
    policies:
      - cors:
          action:
            origin: '*'
      -
        log:
          action:
            message: 'auth ${req.method}'
      -
        proxy:
          action:
            serviceEndpoint: auth
  
  apiSecuredPipeline:
    apiEndpoints:
      - api
    policies:
      - cors:
          action:
            origin: '*'
      -
        log:
          action:
            message: 'Request ${req.method} ${req.path}'
      -
        jwt:
          action:
            secretOrPublicKey: ${SIGN_KEY:-'669B523BBC1157221D3AAA35E8398'}
            checkCredentialExistence: false

      -
        request-transformer:
          action:
            headers:
              add:
                x-user: req.user.userId
                x-rol: req.user.role
      -
        proxy:
          - # Reservas
            condition:
              name: pathExact
              path: /api/v1/pruebas-auth
            action: 
              serviceEndpoint: reservas
          - # Reservas
            condition:
              name: pathMatch
              pattern: "/api/v1/reservas*"
            action: 
              serviceEndpoint: reservas
          - # Facturación
            condition:
              name: pathMatch
              pattern: "/api/v1/bills*"
            action: 
              serviceEndpoint: facturacion
          - # Vehículos
            condition:
              name: pathMatch
              pattern: "/api/v1/vehicles*"
            action: 
              serviceEndpoint: vehiculos
          - # Viajes
            condition:
              name: pathMatch
              pattern: "/api/v1/travels*"
            action: 
              serviceEndpoint: viajes
          - # Defecto
            action: 
              serviceEndpoint: auth